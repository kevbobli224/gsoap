scale.factor = 0.5
# Calculate circle radius
layout = create_layout(xy, no.members, scale.factor = scale.factor)
layout = packing_simple(layout)
# Set  colnames
layout = setNames(layout, c('x', 'y', 'radius'))
# Set rownames
rownames(layout) = rownames(x)
# Calculate number of members
layout$size = no.members
# Calculate significance
layout$significance = -log10(x[,pvalues])
# Set weights
weights = rep(1, nrow(layout))
weights = layout$significance
# Calculate closeness and add to layout
layout$closeness = calc_closeness(dist.mat, weights)
layout$closeness
hist(layout$closeness)
hist(layout$closeness)
hist(layout$closeness, 100)
# Calculate euclidean distance between instances after projection
dx = as.matrix(suppressMessages(philentropy::distance(layout[,1:2], method = 'euclidean')))
# Calculate Kruskal stress after projection and packing
stress = ProjectionBasedClustering::KruskalStress(dist.mat, dx)
message(paste('Kruskall stress :', sprintf('%1.3f', stress)))
# Calculate spearman correlation
spcorr = cor(c(dist.mat), c(dx), method = 'spearman')
message(paste('Rank correlation :', sprintf('%1.3f', spcorr)))
plot(c(dist.mat), c(dx), method = 'spearman')
l = gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",")
warnings()
head(l)
gsoap_plot(l, as.color = 'significance')
gsoap_plot(l, as.color = 'cluster')
l = gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",", projection = 'tsne')
gsoap_plot(l, as.color = 'cluster')
l = gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",", projection = 'tsne', scale.factor = 1.)
gsoap_plot(l, as.color = 'cluster')
library(gsoap)
gsoap_plot(l, as.color = 'cluster', as.alpha = 'significance')
l = gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",", projection = 'tsne')
library(gsoap)
l = gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",", projection = 'tsne')
path = read_excel("~/Downloads/pathway_enrichment_results.xlsx")
path = as.data.frame(path)
path = path[complete.cases(path),]
l = gsoap_layout(path, "selected proteins in pathway", "P-value",
splitter = ",", projection = 'tsne')
gsoap_plot(l, as.color = 'cluster', as.alpha = 'significance')
library(gsoap)
devtools::document()
devtools::tools()
devtools::test()
library(gsoap)
data("pxgenes")
?pxgenes
devtools::document()
?pxgenes
devtools::document()
devtools::document()
devtools::document()
devtools::document()
# Load example dataset
data(pxgenes)
# Take top 100 instances
pxgenes = head(pxgenes[order(pxgenes$FDR),], 100)
# Create GSOAP layout
layout = gsoap_layout(pxgenes, 'Members', 'p.value')
# Order instances by their significance
layout = layout[order(layout$significance, decreasing = TRUE),]
# Create GSOAP plot
p = gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5)
plot(p)
# Load example dataset
data(pxgenes)
# Take top 100 instances
pxgenes = head(pxgenes[order(pxgenes$FDR),], 100)
# Create GSOAP layout
layout = gsoap_layout(pxgenes, 'Members', 'p.value')
# Order instances by their significance
layout = layout[order(layout$significance, decreasing = TRUE),]
# Create GSOAP plot
p = gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5, label.alpha = 1.0)
plot(p)
library(gsoap)
devtools::document()
devtools::test()
png('./img/gsoap_example.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
library(clusterProfiler)
data(geneList)
head(geneList)
x = enrichDO(gene = gene,
ont  = "DO",
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 0.05,
readable = FALSE)
head(x)
gene = names(geneList)[abs(geneList) > 2.0]
x = enrichDO(gene = gene,
ont  = "DO",
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 0.05,
readable = FALSE)
head(x)
colnames(x)
class(X)
class(x)
as.data.frame(x)
l = gsoap_layout(x, 'geneID','p.adjust')
library(gsoap)
l = gsoap_layout(x, 'geneID','p.adjust')
x = as.data.frame(x)
l = gsoap_layout(x, 'geneID','p.adjust')
head(l)
l$cluster
l = gsoap_layout(x, 'geneID','p.adjust')
dim(l)
gene = names(geneList)[abs(geneList) > 2.0]
x = enrichDO(gene = gene,
ont  = "DO",
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 1.00,
readable = FALSE)
x = as.data.frame(x)
dim(x)
?enrichGO
x = enrichDO(gene = gene,
ont  = "DO",
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 1.00,
readable = FALSE)
x = as.data.frame(x)
dim(x)
gene = names(geneList)[abs(geneList) > 1.0]
x = enrichDO(gene = gene,
ont  = "DO",
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 1.00,
readable = FALSE)
x = as.data.frame(x)
dim(x)
l = gsoap_layout(x, 'geneID','p.adjust')
gsoap_plot(l)
gsoap_plot(l, color = 'cluster')
gsoap_plot(l, as.color = 'cluster')
gsoap_plot(l, as.color = 'centrality')
gsoap_plot(l, as.color = 'closeness')
gsoap_plot(l, as.color = 'significance')
l = gsoap_layout(x, 'geneID','p.adjust', projection = 'tsne')
gsoap_plot(l, as.alpha = 'significance', as.color = 'cluster')
?enrichGO
x = enrichGO(gene = gene,
ont  = "MF",
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 1.00,
readable = FALSE)
x = as.data.frame(x)
x = enrichGO(gene = gene,
ont  = "MF",
OrgDb = org.Hs.eg.db,
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 1.00,
readable = FALSE)
x = as.data.frame(x)
x = enrichGO(gene = gene,
ont  = "MF",
OrgDb = 'org.Hs.eg.db',
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 1.00,
readable = FALSE)
x = as.data.frame(x)
dim(;)
dim(l)
l = gsoap_layout(x, 'geneID','p.adjust')
gsoap_plot(l, as.alpha = 'significance', as.color = 'cluster')
dim(l)
dim(x)
gene = names(geneList)[abs(geneList) > 2.0]
x = enrichGO(gene = gene,
ont  = "MF",
OrgDb = 'org.Hs.eg.db',
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 1.00,
readable = FALSE)
x = as.data.frame(x)
library(org.Hs.eg.db)
x = enrichGO(gene = gene,
ont  = "MF",
OrgDb = org.Hs.eg.db,
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 1.00,
readable = FALSE)
x = as.data.frame(x)
dim(x)
gene = names(geneList)[abs(geneList) > 2.0]
x = enrichGO(gene = gene,
ont  = "BP",
OrgDb = org.Hs.eg.db,
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 1.00,
readable = FALSE)
x = as.data.frame(x)
dim(x)
x$qvalue
x$pvalue
x$p.adjust
x = enrichGO(gene = gene,
ont  = "BP",
OrgDb = org.Hs.eg.db,
pvalueCutoff = 0.01,
pAdjustMethod = "fdr",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 0.01,
readable = FALSE)
x = as.data.frame(x)
dim(x)
l = gsoap_layout(x, 'geneID','p.adjust')
gsoap_layout(l)
gsoap_plot(l, as.alpha = 'significance', as.color = 'cluster')
l = gsoap_layout(x, 'geneID','p.adjust', projection = 'tsne', no.clusters = 4)
gsoap_plot(l, as.alpha = 'significance', as.color = 'cluster')
l = gsoap_layout(x, 'geneID','p.adjust', projection = 'tsne', no.clusters = 3)
gsoap_plot(l, as.alpha = 'significance', as.color = 'cluster')
l = gsoap_layout(x, 'geneID','p.adjust', projection = 'tsne', no.clusters = 5)
l = gsoap_layout(x, 'geneID','p.adjust', projection = 'tsne', no.clusters = 5, scale.factor = 0.8)
gsoap_plot(l, as.alpha = 'significance', as.color = 'cluster')
gsoap_plot(l, as.alpha = 'significance', as.color = 'cluster', which.labels = 1:5)
head(x)
rownames(l) = x$Description
gsoap_plot(l, as.alpha = 'significance', as.color = 'cluster', which.labels = 1:5)
gsoap_plot(l, as.alpha = 'significance', as.color = 'cluster', which.labels = whcih(l$cluster == 'Cluster 1'))
gsoap_plot(l, as.alpha = 'significance', as.color = 'cluster', which.labels = which(l$cluster == 'Cluster 1'))
x = enrichGO(gene = gene,
ont  = "BP",
OrgDb = org.Hs.eg.db,
pvalueCutoff = 0.01,
pAdjustMethod = "fdr",
universe = names(geneList),
minGSSize = 5,
maxGSSize = 500,
qvalueCutoff = 0.01,
readable = FALSE)
as.data.frame(x, row.names = x$Description)
x = as.data.frame(x, row.names = x$Description)
l = gsoap_layout(x, 'geneID','p.adjust')
l = gsoap_layout(x,
genes = 'geneID',
pvalues = 'p.adjust',
projection = 'tsne',
scale.factor = 0.8)
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx)
idx = which(l$cluster == 'Cluster 1')
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx)
plot(p)
l = gsoap_layout(x,
genes = 'geneID',
pvalues = 'p.adjust',
projection = 'tsne',
scale.factor = 0.8,
no.clusters = 5)
idx = which(l$cluster == 'Cluster 1')
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx)
plot(p)
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
size.guide.loc = c(1., 1.))
plot(p)
# Plot to file
png('./img/gsoap_example_cluster_profiler.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
# Plot to file
png('./img/gsoap_example_cluster_profiler.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.direction = -1,
size.guide.loc = c(1., 1.))
# Plot to file
png('./img/gsoap_example_cluster_profiler.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.option = 'magma',
viridis.direction = -1,
size.guide.loc = c(1., 1.))
# Plot to file
png('./img/gsoap_example_cluster_profiler.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.option = 'plasma',
viridis.direction = -1,
size.guide.loc = c(1., 1.))
# Plot to file
png('./img/gsoap_example_cluster_profiler.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.option = 'inferno',
viridis.direction = -1,
size.guide.loc = c(1., 1.))
# Plot to file
png('./img/gsoap_example_cluster_profiler.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.option = 'inferno',
viridis.direction = 1,
size.guide.loc = c(1., 1.))
# Plot to file
png('./img/gsoap_example_cluster_profiler.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.option = 'inferno',
viridis.direction = 1,
viridis.range = c(0, .9),
size.guide.loc = c(1., 1.))
plot(p)
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.option = 'inferno',
viridis.direction = 1,
viridis.range = c(.2, 1.),
size.guide.loc = c(1., 1.))
plot(p)
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.option = 'inferno',
viridis.direction = 1,
viridis.range = c(.2, .8),
size.guide.loc = c(1., 1.))
plot(p)
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.option = 'inferno',
viridis.direction = -1,
viridis.range = c(.2, .8),
size.guide.loc = c(1., 1.))
plot(p)
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.option = 'plasma',
viridis.direction = -1,
viridis.range = c(.2, .8),
size.guide.loc = c(1., 1.))
plot(p)
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.option = 'magma',
viridis.direction = -1,
viridis.range = c(.2, .8),
size.guide.loc = c(1., 1.))
plot(p)
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.option = 'plasma',
viridis.direction = 1,
viridis.range = c(.2, .8),
size.guide.loc = c(1., 1.))
plot(p)
p = gsoap_plot(l,
as.alpha = 'significance',
as.color = 'cluster',
which.labels = idx,
viridis.option = 'plasma',
viridis.direction = 1,
viridis.range = c(.2, .8),
size.guide.loc = c(1., 1.),
label.fontsize = 10)
plot(p)
# Plot to file
png('./img/gsoap_example_cluster_profiler.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
devtools::test()
library(gsoap)
?gsoap_layout
?gsoap_plot
library(devtools)
devtools::document()
devtools::document()
devtools::load_all(".")
library(gsoap)
library(gsoap)
library(gsoap)
gsoap::geom_circs
warnings()
library(gsoap)
ggforce::GeomCircle
getExportedValue("ggforce", "GeomCircle")
devtools::load_all(".")
library(gsoap)
install.packages("ggforce")
install.packages("ggforce")
install.packages("ggforce")
library(ggforce)
install.packages("ggforce")
update.packages("ggforce")
library(ggforce)
library(gsoap)
gsoap::gsoap_svg()
# Load GSOAP package
library(gsoap)
# Load example dataset
data(pxgenes)
# Reduce to top 100 instances
pxgenes <-  head(pxgenes[order(pxgenes$FDR),], 100)
# Create GSOAP layout
layout <-  gsoap_layout(pxgenes, 'Members', 'p.value')
# Order instances by their significance
layout <-  layout[order(layout$significance, decreasing = TRUE),]
rownames(layout) <- seq(1:nrow(layout))
p <- gsoap_svg(layout, as.color = 'cluster', as.alpha = 'significance', which.label = c("a6b1 and a6b4 Integrin signaling","Cardiac_Hypertrophy"))
library(gsoap)
p <- gsoap_svg(layout, as.color = 'cluster', as.alpha = 'significance', which.label = c("a6b1 and a6b4 Integrin signaling","Cardiac_Hypertrophy"))
girafe(ggobj = p)
# Load ggiraph to produce html svg
library("ggiraph")
girafe(ggobj = p)
?setNames
